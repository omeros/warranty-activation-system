#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('mistertasker:server');
var http = require('http');
const { connectDB, closeDB, getDB } = require('../config/database');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Make port available in broader scope
var port;
var server;

/**
 * Connect to DB and start server
 */
(async () => {
  try {
    // Connect to the database
    await connectDB();
    
    // Import app after DB connection is established
    var app = require('../app');
    
    // Get port from environment and store in Express
    port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);
    
    // Create HTTP server
    server = http.createServer(app);
    
    // Register event listeners
    server.on('error', onError);
    server.on('listening', onListening);
    
    // Start the server
    server.listen(port, () => {
      console.log(`Server is running on port ${port}`);
    });

  } catch (error) {
    console.error('Failed to start server:', error.message);
    process.exit(1);
  }
})();

module.exports = { getDB };